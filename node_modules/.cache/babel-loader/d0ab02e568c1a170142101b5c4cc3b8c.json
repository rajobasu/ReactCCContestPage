{"ast":null,"code":"var _jsxFileName = \"/Users/rajobasu/Desktop/react_tut/src/components/OnlineEditor/OnlineEditor.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, TextareaAutosize, makeStyles, FormControl, MenuItem, Select, InputLabel, FormHelperText, Button } from \"@material-ui/core\";\nimport LanguageSelector from \"./LanguageSelector\";\nimport { submitCode, getProblemStatus } from \"./../../APICalls/API\";\nimport createPalette from \"@material-ui/core/styles/createPalette\";\n/*\n #include <iostream>\n using namespace std;\n int main(cout<<\"hih\" <<endl;return 0;}\n*/\n\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    width: \"500px\"\n  }\n}));\nexport default function OnlineEditor(props) {\n  const classes = useStyles();\n  const [submitLink, setSubmitLink] = useState(0);\n  const [values, setValues] = useState({\n    sourceCode: \"\",\n    testCase: \"\",\n    languageSelected: props.languages[0].shortName,\n    output: \"\",\n    status: \"None Submitted\",\n    cmpinfo: \"\"\n  });\n\n  const handleChange = prop => event => {\n    setValues({ ...values,\n      [prop]: event.target.value\n    });\n  };\n\n  function getStatus(status) {\n    //console.log(\"THIS IS THE STATUS\");\n    //return;\n    console.log(status);\n    console.log(submitLink);\n\n    if (status.memory === 0) {\n      getProblemStatus(getStatus, submitLink);\n    } else {\n      setValues({ ...values,\n        status: \"Evaluated\",\n        output: status.output,\n        cmpinfo: status.cmpinfo\n      });\n    }\n  }\n\n  useEffect(() => {\n    if (submitLink !== \"\") getProblemStatus(getStatus, submitLink);\n  }, [submitLink]);\n\n  function runProblemCallBack(data) {\n    setValues({ ...values,\n      status: \"submitted\"\n    });\n    console.log(data);\n    setSubmitLink(data); //console.log(\"SUBMITLINK:\" + submitLink);\n  }\n\n  function runProblem() {\n    if (values.sourceCode === \"\") {\n      setValues({ ...values,\n        status: \"Cannot Submit Empty Code\"\n      });\n      return;\n    }\n\n    submitCode(runProblemCallBack, values.sourceCode, values.testCase, values.languageSelected);\n  }\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"Problem Testing\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LanguageSelector, {\n    languages: props.languages,\n    selectedLanguage: values.languageSelected,\n    onChange: handleChange(\"languageSelected\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  }, \"Source Code\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextareaAutosize, {\n    className: classes.textField,\n    onChange: handleChange(\"sourceCode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, \"Test Case\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextareaAutosize, {\n    className: classes.textField,\n    onChange: handleChange(\"testCase\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(Button, {\n    color: \"inherit\",\n    onClick: runProblem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, \"Status: \", values.status), /*#__PURE__*/React.createElement(\"textarea\", {\n    className: {\n      flexGrow: 1\n    },\n    rows: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, values.output), /*#__PURE__*/React.createElement(\"textarea\", {\n    className: {\n      flexGrow: 1\n    },\n    rows: 7 //value={values.cmpinfo}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, values.cmpinfo));\n}","map":{"version":3,"sources":["/Users/rajobasu/Desktop/react_tut/src/components/OnlineEditor/OnlineEditor.js"],"names":["React","useState","useEffect","Grid","TextareaAutosize","makeStyles","FormControl","MenuItem","Select","InputLabel","FormHelperText","Button","LanguageSelector","submitCode","getProblemStatus","createPalette","useStyles","theme","textField","width","OnlineEditor","props","classes","submitLink","setSubmitLink","values","setValues","sourceCode","testCase","languageSelected","languages","shortName","output","status","cmpinfo","handleChange","prop","event","target","value","getStatus","console","log","memory","runProblemCallBack","data","runProblem","flexGrow"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  TextareaAutosize,\n  makeStyles,\n  FormControl,\n  MenuItem,\n  Select,\n  InputLabel,\n  FormHelperText,\n  Button,\n} from \"@material-ui/core\";\nimport LanguageSelector from \"./LanguageSelector\";\nimport { submitCode, getProblemStatus } from \"./../../APICalls/API\";\nimport createPalette from \"@material-ui/core/styles/createPalette\";\n/*\n #include <iostream>\n using namespace std;\n int main(cout<<\"hih\" <<endl;return 0;}\n*/\nconst useStyles = makeStyles((theme) => ({\n  textField: {\n    width: \"500px\",\n  },\n}));\n\nexport default function OnlineEditor(props) {\n  const classes = useStyles();\n  const [submitLink, setSubmitLink] = useState(0);\n  const [values, setValues] = useState({\n    sourceCode: \"\",\n    testCase: \"\",\n    languageSelected: props.languages[0].shortName,\n    output: \"\",\n    status: \"None Submitted\",\n    cmpinfo: \"\",\n  });\n\n  const handleChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value });\n  };\n\n  function getStatus(status) {\n    //console.log(\"THIS IS THE STATUS\");\n    //return;\n    console.log(status);\n    console.log(submitLink);\n    if (status.memory === 0) {\n      getProblemStatus(getStatus, submitLink);\n    } else {\n      setValues({\n        ...values,\n        status: \"Evaluated\",\n        output: status.output,\n        cmpinfo: status.cmpinfo,\n      });\n    }\n  }\n\n  useEffect(() => {\n    if (submitLink !== \"\") getProblemStatus(getStatus, submitLink);\n  }, [submitLink]);\n\n  function runProblemCallBack(data) {\n    setValues({ ...values, status: \"submitted\" });\n    console.log(data);\n    setSubmitLink(data);\n    //console.log(\"SUBMITLINK:\" + submitLink);\n  }\n  function runProblem() {\n    if (values.sourceCode === \"\") {\n      setValues({ ...values, status: \"Cannot Submit Empty Code\" });\n      return;\n    }\n    submitCode(\n      runProblemCallBack,\n      values.sourceCode,\n      values.testCase,\n      values.languageSelected\n    );\n  }\n\n  return (\n    <Grid container direction=\"column\">\n      <Grid item></Grid>\n      <Grid item xs={8}>\n        <br />\n        <h2>Problem Testing</h2>\n      </Grid>\n      <Grid item>\n        <LanguageSelector\n          languages={props.languages}\n          selectedLanguage={values.languageSelected}\n          onChange={handleChange(\"languageSelected\")}\n        />\n      </Grid>\n      <Grid container>\n        <Grid item>\n          <Grid container direction=\"column\">\n            <Grid item>\n              <h5>Source Code</h5>\n            </Grid>\n            <Grid item>\n              <TextareaAutosize\n                className={classes.textField}\n                onChange={handleChange(\"sourceCode\")}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <Grid container direction=\"column\">\n            <Grid item>\n              <h5>Test Case</h5>\n            </Grid>\n            <Grid item>\n              <TextareaAutosize\n                className={classes.textField}\n                onChange={handleChange(\"testCase\")}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Button color=\"inherit\" onClick={runProblem}>\n        Submit\n      </Button>\n      <h5>Status: {values.status}</h5>\n      <textarea className={{ flexGrow: 1 }} rows={7}>\n        {values.output}\n      </textarea>\n      <textarea\n        className={{ flexGrow: 1 }}\n        rows={7}\n        //value={values.cmpinfo}\n      >\n        {values.cmpinfo}\n      </textarea>\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}